#!/usr/bin/env python

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import os
import pickle
import sys
import traceback

import pandas as pd
from sklearn.ensemble import RandomForestClassifier

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/program/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='train'
training_path = os.path.join(input_path, channel_name)


# The function to execute the training.
def train():
    """
                Train and fit classification model
                :param<clf>: Classification object.
                :param<X_train>: Pandas dataframe of features.
                :param<y_train>: Pandas dataframe of the y to be predicted.

                :return: On success fitting data, else None.

    """
    print('Starting the training.')
    try:

        # Take the set of files and read them all into a single pandas dataframe
        input_files = [os.path.join(training_path, file) for file in listdir_nohidden(training_path)]

        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        raw_data = [pd.read_csv(file, header=None) for file in input_files]
        train_data = pd.concat(raw_data)

        # Split the data with label (response variable) as the first column
        X_train = train_data.iloc[:, 1:]
        y_train = train_data.iloc[:, 0]

        clf = RandomForestClassifier()
        clf = clf.fit(X_train, y_train)

        # save the model
        with open(os.path.join(model_path, 'model.pkl'), 'w') as out:
            pickle.dump(clf, out)
        print('Training complete.')

    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w+') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)


def listdir_nohidden(path):
    for f in os.listdir(path):
        if not f.startswith('.'):
            yield f


if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
